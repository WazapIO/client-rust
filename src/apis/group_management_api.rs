/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`instances_instance_key_groups_admin_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsAdminGetError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_create_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsCreatePostError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGetError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_announce_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdAnnouncePutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdDeleteError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_description_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdDescriptionPutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdGetError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_invite_code_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdInviteCodeGetError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_lock_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdLockPutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_name_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdNamePutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_participants_add_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdParticipantsAddPostError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_participants_demote_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_participants_promote_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_participants_remove_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_group_id_profile_pic_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsGroupIdProfilePicPutError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`instances_instance_key_groups_invite_info_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstancesInstanceKeyGroupsInviteInfoGetError {
    Status400(crate::models::MainPeriodApiResponse),
    Status401(crate::models::MainPeriodApiResponse),
    Status404(crate::models::MainPeriodApiResponse),
    Status500(crate::models::MainPeriodApiResponse),
    UnknownValue(serde_json::Value),
}


/// Returns list of all groups in which you are admin.
pub async fn instances_instance_key_groups_admin_get(configuration: &configuration::Configuration, instance_key: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsAdminGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/admin", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsAdminGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a group with the participant data. The creator is automatically added to the group.
pub async fn instances_instance_key_groups_create_post(configuration: &configuration::Configuration, instance_key: &str, data: crate::models::StructsPeriodGroupCreatePayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsCreatePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/create", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsCreatePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
pub async fn instances_instance_key_groups_get(configuration: &configuration::Configuration, instance_key: &str, include_participants: Option<&str>) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = include_participants {
        local_var_req_builder = local_var_req_builder.query(&[("include_participants", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set if non-admins are allowed to send messages in groups
pub async fn instances_instance_key_groups_group_id_announce_put(configuration: &configuration::Configuration, instance_key: &str, announce: bool, group_id: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdAnnouncePutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/announce", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), announce=announce, group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdAnnouncePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Leaves the specified group.
pub async fn instances_instance_key_groups_group_id_delete(configuration: &configuration::Configuration, instance_key: &str, group_id: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Changes the group description
pub async fn instances_instance_key_groups_group_id_description_put(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, data: crate::models::StructsPeriodGroupUpdateDescriptionPayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdDescriptionPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/description", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdDescriptionPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetches the group data.
pub async fn instances_instance_key_groups_group_id_get(configuration: &configuration::Configuration, instance_key: &str, group_id: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the invite code of the group.
pub async fn instances_instance_key_groups_group_id_invite_code_get(configuration: &configuration::Configuration, instance_key: &str, group_id: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdInviteCodeGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/invite-code", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdInviteCodeGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set if non-admins are allowed to change the group dp and other stuff
pub async fn instances_instance_key_groups_group_id_lock_put(configuration: &configuration::Configuration, instance_key: &str, locked: bool, group_id: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdLockPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/lock", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), locked=locked, group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdLockPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Changes the group name. The max limit is 22 chars
pub async fn instances_instance_key_groups_group_id_name_put(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, data: crate::models::StructsPeriodGroupUpdateNamePayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdNamePutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/name", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdNamePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Handles adding participants to a group. You must be admin in the group or the query will fail.
pub async fn instances_instance_key_groups_group_id_participants_add_post(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, data: crate::models::StructsPeriodGroupUpdateParticipantsPayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdParticipantsAddPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/participants/add", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdParticipantsAddPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Demotes admins in groups. You must be admin in the group or the query will fail.
pub async fn instances_instance_key_groups_group_id_participants_demote_put(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, data: crate::models::StructsPeriodGroupUpdateParticipantsPayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/participants/demote", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Promotes participants to admin. You must be admin in the group or the query will fail.
pub async fn instances_instance_key_groups_group_id_participants_promote_put(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, data: crate::models::StructsPeriodGroupUpdateParticipantsPayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/participants/promote", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Handles removing participants from a group. You must be admin in the group or the query will fail.
pub async fn instances_instance_key_groups_group_id_participants_remove_delete(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, data: crate::models::StructsPeriodGroupUpdateParticipantsPayload) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/participants/remove", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Changes the group profile picture. Currently it only seems to accept JPEG images only
pub async fn instances_instance_key_groups_group_id_profile_pic_put(configuration: &configuration::Configuration, instance_key: &str, group_id: &str, instances_instance_key_groups_group_id_profile_pic_put_request: crate::models::InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsGroupIdProfilePicPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/{group_id}/profile-pic", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key), group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&instances_instance_key_groups_group_id_profile_pic_put_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsGroupIdProfilePicPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
pub async fn instances_instance_key_groups_invite_info_get(configuration: &configuration::Configuration, instance_key: &str, invite_link: &str) -> Result<crate::models::MainPeriodApiResponse, Error<InstancesInstanceKeyGroupsInviteInfoGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/instances/{instance_key}/groups/invite-info", local_var_configuration.base_path, instance_key=crate::apis::urlencode(instance_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("invite_link", &invite_link.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InstancesInstanceKeyGroupsInviteInfoGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

